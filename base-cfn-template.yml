AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cfn Template for CodeDeploy app'
Parameters:
  Stage:
    AllowedValues:
      - test
      - prod
    ConstraintDescription: Must be a valid Stage
    Description: Application Stage
    Type: String
  PipelineStackName:
    Default: AWSLineMovementInfrastructurePipelineStack
    Type: String
    Description: 'The name of the associated Pipeline stack created'

Resources:
  # DDB Tables
  GameEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: '${AWS::StackName}-GameEventsTable'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: GameEventIdentifier
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: GameEventIdentifier
          KeyType: HASH
        - AttributeName: Timestamp
          KeyType: RANGE

  # Lambda Functions
  AWSLineMovementServiceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-AWSLineMovementServiceLambda'
      Handler: com.awslinemovement.service.handler.LambdaEntryPoint
      MemorySize: 512
      Role:
        Fn::ImportValue: "LambdaRoleArnExport"
      Code:
        S3Bucket: "awslinemovementservice-lambda-src-code"
        S3Key: "ServiceLambdaCode"
      Runtime: java11
      Timeout: 100

  AWSLineMovementAPIGLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-APIGLambda'
      Handler: com.awslinemovement.service.handler.APIGLambdaEntryPoint
      MemorySize: 512
      Role:
        Fn::ImportValue: "LambdaRoleArnExport"
      Code:
        S3Bucket: "awslinemovementservice-lambda-src-code"
        S3Key: "ServiceLambdaCode"
      Runtime: java11
      Timeout: 100

  # Event (Lambda Trigger)
  LambdaCronEventTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: Cron job to trigger Lambda every 5 minutes
      ScheduleExpression: rate(5 minutes)
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt AWSLineMovementServiceLambda.Arn
          Id: "AWSLineMovementServiceLambda"
          Input: "{}"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AWSLineMovementServiceLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt LambdaCronEventTrigger.Arn

  # API Gateway v2
  AWSLineMovementHTTPApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}-HTTP-API"
      ProtocolType: HTTP

  APILambdProxyIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      Description: "APIGateway + Lambda Proxy Integration"
      ConnectionType: INTERNET
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AWSLineMovementAPIGLambda.Arn}/invocations"
      PayloadFormatVersion: '1.0'
      ApiId: !Ref AWSLineMovementHTTPApi

  APIRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    DependsOn:
      - APILambdProxyIntegration
    Properties:
      ApiId: !Ref AWSLineMovementHTTPApi
      RouteKey: 'GET /graph'
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref APILambdProxyIntegration

  APIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref AWSLineMovementHTTPApi
      AutoDeploy: true
      StageName: !Ref Stage

  PermissionForApiGatewayToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AWSLineMovementAPIGLambda
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${AWSLineMovementHTTPApi}/*'

Outputs:
  GameEventsTableName:
    Value:
      Ref: GameEventsTable
  GameEventsTableArn:
    Value:
      Fn::GetAtt:
        - GameEventsTable
        - Arn